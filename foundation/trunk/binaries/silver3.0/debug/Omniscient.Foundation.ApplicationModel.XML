<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Omniscient.Foundation.ApplicationModel</name>
    </assembly>
    <members>
        <member name="T:Omniscient.Foundation.ApplicationModel.ApplicationManager">
            <summary>
            Abstracts the concept of an application.  Serves as the bootstrapper of any application
            that uses the Foundation.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication">
            <summary>
            Starts the application.  That method should be one of the first being called when the program starts.  The method
            loads the configuration from the AppDomain configuration file.
            </summary>
            <remarks>
            That method will look for application configuration.  In the configuration file, the config section must
            be called "foundation.application", and must be in the namespace 
            "http://schemas.omniscient.ca/foundation/applicationConfiguration.xsd".  The section handler is 
            <see cref="!:ApplicationConfigurationSectionHandler"/>.
            </remarks>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication(Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration)">
            <summary>
            Starts the application.  That method should be one of the first being called when the program starts. The method
            accepts an existing configuration object.  See <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/> for default configuration.
            </summary>
            <param name="config">Loaded application object.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.CloseApplication">
            <summary>
            Closes the application.  Generally, that should lead to the process being terminated.
            </summary>
            <remarks>
            All services that implement <see cref="T:Omniscient.Foundation.ApplicationModel.IStartable"/> are stopped here, in reverse order that they 
            have been started.
            </remarks>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Current">
            <summary>
            Gets the current Application object.  Each application using foundation has a single Current Application.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.IsStarted">
            <summary>
            Gets a value indicating whether <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Current"/> has been started by a call to <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ServiceProvider">
            <summary>
            Gets or sets the <see cref="T:Omniscient.Foundation.ServiceModel.IServiceProvider"/>.  If not set, then it will automatically be created with an instance
            of <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ServiceProvider"/>.
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.PresentationController">
            <summary>
            Gets or sets the <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.  If not set, then it will automatically be created with an 
            instance of <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.PresentationController"/>.
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Shell">
            <summary>
            Gets or sets the <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IShell"/>, which is the main UI fabric of a desktop application.  If not set, then
            the user will have to manually create presenters (<see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter"/>) and view controllers
            (<see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IViewController"/>), and bind those to the UI.
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Kernel">
            <summary>
            Gets or sets Ninject's Kernel.  If not set, then this application will run without dependency injection.
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.CommandStore">
            <summary>
            Get or sets Ninject's Command strore.  If not set, then this application will run without dependency injection.
            This stored is used to get all the application commands.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Logger">
            <summary>
            Gets or sets the application logger.  A logger consists of one or more <see cref="T:Omniscient.Foundation.Logging.ILogWriter"/> objects,
            sequentially called during a logging operation.  The default logger comes with one in-memory log writer.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ApplicationModuleManager">
            <summary>
            Gets or sets the <see cref="T:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager"/>.  If not set, then it will automatically be created with
            an instance of <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ApplicationModuleManager"/>.  
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Config">
            <summary>
            Gets the deserialized configuration.  In the configuration file, the config section must
            be called "foundation.application", and must be in the namespace 
            "http://schemas.omniscient.ca/foundation/applicationConfiguration.xsd".  See the xsd schema file ApplicationConfiguration.xsd
            for the complete schema.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.EntityModelBase`1">
            <summary>
            Base class for models.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IEntityModel`1">
            <summary>
            Represents a model.  Models are logical wrappers around entities; they define relations between entities
            and are responsible for managing the state and status of entities.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IModel">
            <summary>
            Core contract for a model.  See <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IEntityModel"/> for models that wrap entities.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ModuleDefinition">
            <summary>
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ModuleDefinition.Type">
            <summary>
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IEntityModel">
            <summary>
            Represents a model.  Models are logical wrappers around entities; they define relations between entities
            and are responsible for managing the state and status of entities.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.ViewViewModelBinding">
            <summary>
            Represents a binding between a model, a view and optionally a view model.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewViewModelBinding.#ctor(System.Type)">
            <summary>
            Creates the binding
            </summary>
            <param name="viewType">The type of the view that is bound.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewViewModelBinding.Through``1">
            <summary>
            Binds a view model to the model-view binding.
            </summary>
            <typeparam name="TViewModel">The type of view model to bind.</typeparam>
            <returns>Returns this.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ViewViewModelBinding.ViewType">
            <summary>
            Gets the type of the view that is bound.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ViewViewModelBinding.ViewModelType">
            <summary>
            Gets the optional view model that is bound.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule">
            <summary>
             An application module is 
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.ViewModelBinding">
            <summary>
            Holds a binding between a model and an view.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewModelBinding.#ctor(System.Type)">
            <summary>
            Creates a binding for a type of model.
            </summary>
            <param name="modelType">The type of model to bind.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewModelBinding.To``1">
            <summary>
            Binds a model to a view
            </summary>
            <typeparam name="TView">The type of view to bind to.</typeparam>
            <returns>A binding.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ViewModelBinding.ModelType">
            <summary>
            The type of model that is bound.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ViewModelBinding.Binding">
            <summary>
            The binding to the view.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IView">
            <summary>
            Represents a view in the Model-View-Controller, Model-View-Presenter or Model-View-ViewModel patterns.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IView.UpdateView">
            <summary>
            Called when the view has to refresh itself.
            </summary>
        </member>
        <member name="E:Omniscient.Foundation.ApplicationModel.Presentation.IView.SelectionChanged">
            <summary>
            Raised when the selected item changed inside the current view.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IView.Title">
            <summary>
            Gets or sets the view's title.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IView.Selection">
            <summary>
            Gets an object that is currently selected by the user.  Works in pair with ViewContextChangedEventHandler.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.SelectionChangedEventHandler">
            <summary>
            Describes an event handler that handles selection changes that occur from within a view.
            </summary>
            <param name="source">The source of the event (generally an IView)</param>
            <param name="e">Event args</param>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.SelectionChangedEventArgs">
            <summary>
            Arguments passed to a SelectionChanged event raised by an IView.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.SelectionChangedEventArgs.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.SelectionChangedEventArgs.#ctor(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Ctor
            </summary>
            <param name="view">The view that raises the event</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.SelectionChangedEventArgs.#ctor(Omniscient.Foundation.ApplicationModel.Presentation.IView,System.Object)">
            <summary>
            Ctor
            </summary>
            <param name="view">The view that raises the event</param>
            <param name="selection">The object being selected in the view</param>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration">
            <summary>
            Placeholder for application configuration.  Will persist and unpersist against the schema defined in the file
            ApplicationConfiguration.xsd.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration.#ctor">
            <summary>
            Ctor.  Creates empty childs for optional childs.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration.ServicesConfiguration">
            <summary>
            Services section.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration.ModulesConfiguration">
            <summary>
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController">
            <summary>
            Default implementation for <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.  Generally, does not have to be derived for default behavior.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController">
            <summary>
            Represents an application controller.  Responsible for managing entity edition concurrency, and for managing the UI in general.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view.  The controller is responsible for finding a view for that model, instanciating the view
            and displaying it correctly.
            </summary>
            <param name="model">The model to open.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.OpenView``1(System.Collections.Generic.IList{``0})">
            <summary>
            Opens a view.  The controller is responsible for finding a view for those models, instanciating the view
            and displaying it correctly.
            </summary>
            <param name="models">The models to open.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.ViewClosed(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Informs the controller that a view has been closed.
            </summary>
            <param name="view">The view that's been closed.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.RegisterViewController(Omniscient.Foundation.ApplicationModel.Presentation.IViewController)" -->
        <!-- Badly formed XML comment ignored for member "M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.GetViewController``1" -->
        <!-- Badly formed XML comment ignored for member "M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.RegisterPresenter(Omniscient.Foundation.ApplicationModel.Presentation.IPresenter)" -->
        <!-- Badly formed XML comment ignored for member "M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.GetPresenter(System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.GetPresenter``1" -->
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.CloseAllViews">
            <summary>
            Close all views of all view controllers.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.CloseAllViews``1">
            <summary>
             Closes all views for a specific model type.
            </summary>
            <typeparam name="TModel">Model type filter.</typeparam>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.SupportsUserInput" -->
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.#ctor(System.Boolean)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view.  The controller is responsible for finding a view for that model, instanciating the view
            and displaying it correctly.
            </summary>
            <param name="model">The model to open.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.OpenView``1(System.Collections.Generic.IList{``0})">
            <summary>
            Opens a view.  The controller is responsible for finding a view for those models, instanciating the view
            and displaying it correctly.
            </summary>
            <param name="models">The models to open.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.CloseAllViews``1">
            <summary>
             Closes all views for a specific model type.
            </summary>
            <typeparam name="TModel">Model type filter.</typeparam>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.ViewClosed(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Informs the controller that a view has been closed.
            </summary>
            <param name="view">The view that's been closed.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Load(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Loads a module.  Loading a module through this interface is necessary to make the module part of the application's 
            lifetime management.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be loaded in Ninject.
            </summary>
            <param name="module">The application module to load.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.IsLoaded(System.String)">
            <summary>
            Returns true if a module with that name is loaded.
            </summary>
            <param name="name">the name of the module to look fo.</param>
            <returns>true if the module is loaded; otherwise, false.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Activate(System.String)">
            <summary>
            Activates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to activate a module that is not loaded yet.
            </summary>
            <param name="name">Name of the module to activate.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when activating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Activate(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Activates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to activate a module that is not loaded yet.
            </summary>
            <param name="module">A module that must be loaded.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when activating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ActivateAll">
            <summary>
            Activates all currently loaded modules.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Deactivate(System.String)">
            <summary>
            Deactivates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to deactivated a module that not loaded and not activated.
            </summary>
            <param name="name">Name of the module to deactivate.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when deactivating a module that's not loaded and not activated.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Deactivate(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Deactivates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to deactivated a module that not loaded and not activated.
            </summary>
            <param name="module">A module to deactivate</param>
            <exception cref="T:System.InvalidOperationException">Thrown when deactivating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.DeactivateAll">
            <summary>
            Deactivates all activated modules in reverse order that they have been loaded.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Unload(System.String)">
            <summary>
            Unloads a module.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be unloaded from Ninject.  It is invalid to unload a module that's not been loaded.
            </summary>
            <param name="name">Name of a module to unload.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the module has not been loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Unload(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Unloads a module.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be unloaded from Ninject.  It is invalid to unload a module that's not been loaded.
            </summary>
            <param name="module">A module to unload.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the module has not been loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.UnloadAll">
            <summary>
            Unloads all loaded modules.  Automatically deactivates all modules before unloading them.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.PresentationController">
            <summary>
            Gets or sets the presentation controller used to activate modules.  Using the controller, modules and place themselves
            in the UI loop.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ModuleManager">
            <summary>
            Gets or sets Ninject's module manager.  If provided, then loading and unloading Ninject modules will affect Ninject as well.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.All">
            <summary>
            Returns a list of all loaded modules.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Count">
            <summary>
            Gets the total number of loaded modules.  Decreases when unloading modules.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ServicesConfiguration">
            <summary>
            Placeholder for services configuration.  Contains a list of service definitions.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ServicesConfiguration.#ctor">
            <summary>
            Ctor.  Creates an empty list of service definitions.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServicesConfiguration.ServiceDefinitions">
            <summary>
            Gets the list of service definitions.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IViewControllerExtenderContract">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewControllerExtenderContract.GetView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Load(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Loads a module.  Loading a module through this interface is necessary to make the module part of the application's 
            lifetime management.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be loaded in Ninject.
            </summary>
            <param name="module">The application module to load.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.IsLoaded(System.String)">
            <summary>
            Returns true if a module with that name is loaded.
            </summary>
            <param name="name">the name of the module to look fo.</param>
            <returns>true if the module is loaded; otherwise, false.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Activate(System.String)">
            <summary>
            Activates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to activate a module that is not loaded yet.
            </summary>
            <param name="name">Name of the module to activate.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when activating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Activate(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Activates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to activate a module that is not loaded yet.
            </summary>
            <param name="module">A module that must be loaded.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when activating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ActivateAll">
            <summary>
            Activates all currently loaded modules.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Deactivate(System.String)">
            <summary>
            Deactivates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to deactivated a module that not loaded and not activated.
            </summary>
            <param name="name">Name of the module to deactivate.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when deactivating a module that's not loaded and not activated.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Deactivate(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Deactivates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to deactivated a module that not loaded and not activated.
            </summary>
            <param name="module">A module to deactivate</param>
            <exception cref="T:System.InvalidOperationException">Thrown when deactivating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.DeactivateAll">
            <summary>
            Deactivates all activated modules in reverse order that they have been loaded.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Unload(System.String)">
            <summary>
            Unloads a module.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be unloaded from Ninject.  It is invalid to unload a module that's not been loaded.
            </summary>
            <param name="name">Name of a module to unload.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the module has not been loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Unload(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Unloads a module.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be unloaded from Ninject.  It is invalid to unload a module that's not been loaded.
            </summary>
            <param name="module">A module to unload.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the module has not been loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.UnloadAll">
            <summary>
            Unloads all loaded modules.  Automatically deactivates all modules before unloading them.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.PresentationController">
            <summary>
            Gets or sets the presentation controller used to activate modules.  Using the controller, modules and place themselves
            in the UI loop.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ModuleManager">
            <summary>
            Gets or sets Ninject's module manager.  If provided, then loading and unloading Ninject modules will affect Ninject as well.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.All">
            <summary>
            Returns a list of all loaded modules.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Count">
            <summary>
            Gets the total number of loaded modules.  Decreases when unloading modules.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IViewController">
            <summary>
            Defines a view controller.
            
            View controllers are responsible for controlling the display of individual views.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view for the given model.
            </summary>
            <param name="model">Model to open in a view.</param>
            <returns>Newly opened view.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.OpenView``1(System.Collections.Generic.IList{``0})">
            <summary>
            Opens a view for the given list of models.
            </summary>
            <param name="models">Models to open in a view.</param>
            <returns>Newly opened view.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.Focus(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Puts a certain view into focus, given that this view is already opened by the controller.
            </summary>
            <param name="view">The view that receives focus.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.CloseView(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Closes a certain view, given that this view is already opened by the controller.
            </summary>
            <param name="view">The view to close.</param>
            <returns>True if the view has been successfully closed.  Otherwise, false.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.CloseViewRange(System.Collections.Generic.IEnumerable{Omniscient.Foundation.ApplicationModel.Presentation.IView})">
            <summary>
            Closes a group of views, until a certain view is not already opened by the controller.
            </summary>
            <param name="views">The views to close.</param>
            <returns>True if all views have been closed.  Otherwise, false.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.CloseAllViews``1">
            <summary>
            Closes all opened views.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.Bind``1">
            <summary>
            Binds a model to a view and optionally a view model.  This is a DSL; e.g.:
            Bind&lt;MyModel&gt;().To&lt;MyView&gt;().Through&lt;MyViewModel&gt;();
            </summary>
            <typeparam name="TModel">The type of model to bind.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.GetBinding``1">
            <summary>
            Returns a binding for model of type <typeparamref name="TModel"/> name="TModel"/>, if any.  If not found, returns null.
            </summary>
            <typeparam name="TModel">The type of model to search a binding for.</typeparam>
            <returns>A binding of found, or null if not found.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.GetBinding(System.Type)">
            <summary>
            Returns a binding for model of type <paramref name="modelType"/>, if any.  If not found, returns null.
            </summary>
            <param name="modelType">The type of model to search a binding for.</param>
            <returns>A binding of found, or null if not found.</returns>
        </member>
        <member name="E:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.CurrentViewChanged">
            <summary>
            Raised when the user switches the current view.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.CurrentView">
            <summary>
            Returns the view that has the focus, or by any other mean is the "current view".
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Omniscient.Foundation.ApplicationModel.Presentation.IShell" -->
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IShell.Show">
            <summary>
            Tells the shell to display itself, when the application starts.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Omniscient.Foundation.ApplicationModel.Presentation.IShell.CreateViewControllers" -->
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IShell.CreatePresenters">
            <summary>
            Asks the shell to create all non-data presenters (e.g. Status Bar Presenter, or Message Console Presenter).
            The shell does not have to keep a reference to those presenters.
            </summary>
            <returns>The list of created presenters.</returns>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentableObject">
            <summary>
            Represents an object that has a Text property to be displayed on the UI.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IPresentableObject.Text">
            <summary>
            Gets or sets the text displayed on the screen for that object.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter" -->
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter.WriteMessage(System.Object)">
            <summary>
            Writes a single message to the presentation medium.  Most presenters will add more complex functionality (through
            a custom interface) than this simple function.
            </summary>
            <param name="message">A message to display.</param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter.Name">
            <summary>
            Gets the name of that presenter.  Generally the name of the concrete class.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter.RequiresUserInput" -->
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IViewModel`1">
            <summary>
            IViewModel is a wrapper for the IModel which is bound to IView.
            </summary>
            <typeparam name="TModel">Type of the model to be wrapped.</typeparam>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase">
            <summary>
            Base class for view controllers that implements some generic functionalities.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.#ctor">
            <summary>
            Creates a view controller
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view for the given model.
            </summary>
            <param name="model">Model to open in a view.</param>
            <returns>Newly opened view.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.OnNewViewOpened(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Adds a view to the list of opened views, and sets <see cref="P:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.CurrentView"/>.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.OpenView``1(System.Collections.Generic.IList{``0})">
            <summary>
            Opens a view for the given list of models.
            </summary>
            <param name="models">Models to open in a view.</param>
            <returns>Newly opened view.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.Focus(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Puts a certain view into focus, given that this view is already opened by the controller.
            </summary>
            <param name="view">The view that receives focus.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.CloseView(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Closes a certain view, given that this view is already opened by the controller.
            </summary>
            <param name="view">The view to close.</param>
            <returns>True if the view has been successfully closed.  Otherwise, false.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.CloseViewRange(System.Collections.Generic.IEnumerable{Omniscient.Foundation.ApplicationModel.Presentation.IView})">
            <summary>
            Closes a group of views, until a certain view is not already opened by the controller.
            </summary>
            <param name="views">The views to close.</param>
            <returns>True if all views have been closed.  Otherwise, false.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.CloseAllViews``1">
            <summary>
            Closes all opened views;
            </summary>
            <typeparam name="TModel"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.Bind``1">
            <summary>
            Binds a model to a view and optionally a view model.  This is a DSL; e.g.:
            Bind&lt;MyModel&gt;().To&lt;MyView&gt;().Through&lt;MyViewModel&gt;();
            </summary>
            <typeparam name="TModel">The type of model to bind.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.GetBinding``1">
            <summary>
            Returns a binding for model of type <typeparamref name="TModel"/> name="TModel"/>, if any.  If not found, returns null.
            </summary>
            <typeparam name="TModel">The type of model to search a binding for.</typeparam>
            <returns>A binding of found, or null if not found.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.GetBinding(System.Type)">
            <summary>
            Returns a binding for model of type <paramref name="modelType"/>, if any.  If not found, returns null.
            </summary>
            <param name="modelType">The type of model to search a binding for.</param>
            <returns>A binding of found, or null if not found.</returns>
        </member>
        <member name="E:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.CurrentViewChanged">
            <summary>
            Raised when the <see cref="P:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.CurrentView"/> is changed to another view.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.CurrentView">
            <summary>
            Returns the view that has the focus, or by any other mean is the "current view".
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ViewControllerBase.OpenedViews">
            <summary>
            Gets the list of currently opened views.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition">
            <summary>
            Placeholder for a service definition.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition.Service">
            <summary>
            The assembly-qualified name of the type that implements IService for that service.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition.Contract">
            <summary>
            The assembly-qualified name of that service's contract.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition.Config">
            <summary>
            Optional.  Any configuration needed by a service that implements <see cref="T:Omniscient.Foundation.ApplicationModel.IConfigurable"/>.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ModulesConfiguration">
            <summary>
            Placeholder for modules configuration.  Contains a list of service definitions.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ModulesConfiguration.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ModulesConfiguration.Modules">
            <summary>
            </summary>
        </member>
    </members>
</doc>
