<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Omniscient.Foundation.ApplicationModel</name>
    </assembly>
    <members>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ServicesConfiguration">
            <summary>
            Placeholder for services configuration.  Contains a list of service definitions.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ServicesConfiguration.#ctor">
            <summary>
            Ctor.  Creates an empty list of service definitions.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServicesConfiguration.ServiceDefinitions">
            <summary>
            Gets the list of service definitions.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.ApplicationManager">
            <summary>
            Abstracts the concept of an application.  Serves as the bootstrapper of any application
            that uses the Foundation.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication">
            <summary>
            Starts the application.  That method should be one of the first being called when the program starts.  The method
            loads the configuration from the AppDomain configuration file.
            </summary>
            <remarks>
            That method will look for application configuration.  In the configuration file, the config section must
            be called "foundation.application", and must be in the namespace 
            "http://schemas.omniscient.ca/foundation/applicationConfiguration.xsd".  See the xsd schema file ApplicationConfiguration.xsd
            for the complete schema.
            </remarks>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication(Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration)">
            <summary>
            Starts the application.  That method should be one of the first being called when the program starts. The method
            accepts an existing configuration object.  See <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/> for default configuration.
            </summary>
            <param name="config">Loaded application object.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.CloseApplication">
            <summary>
            Closes the application.  Generally, that should lead to the process being terminated.
            </summary>
            <remarks>
            All services that implement <see cref="T:Omniscient.Foundation.ApplicationModel.IStartable"/> are stopped here, in reverse order that they 
            have been started.
            </remarks>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Current">
            <summary>
            Gets the current Application object.  Each application using foundation has a single Current Application.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.IsStarted">
            <summary>
            Gets a value indicating whether <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Current"/> has been started by a call to <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ServiceProvider">
            <summary>
            Gets or sets the <see cref="!:IServiceProvider"/>.  If not set, then it will automatically be created with an instance
            of <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ServiceProvider"/>.
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.PresentationController">
            <summary>
            Gets or sets the <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.  If not set, then it will automatically be created with an 
            instance of <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.PresentationController"/>.
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Shell">
            <summary>
            Gets or sets the <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IShell"/>, which is the main UI fabric of a desktop application.  If not set, then
            the user will have to manually create presenters (<see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter"/>) and view controllers
            (<see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IViewController"/>), and bind those to the UI.
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Kernel">
            <summary>
            Gets or sets Ninject's Kernel.  If not set, then this application will run without dependency injection.
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ApplicationModuleManager">
            <summary>
            Gets or sets the <see cref="T:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager"/>.  If not set, then it will automatically be created with
            an instance of <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ApplicationModuleManager"/>.  
            Once the application is started with <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>, it is not possible to set this to a new value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when setting to a value after the application is started.</exception>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Config">
            <summary>
            Gets the deserialized configuration.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IViewController">
            <summary>
            Defines a view controller.
            
            View controllers are responsible for controlling the display of individual views.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view for the given model.
            </summary>
            <param name="model">Model to open in a view.</param>
            <returns>Newly opened view.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.CurrentView">
            <summary>
            Returns the view that has the focus, or by any other mean is the "current view".
            </summary>
        </member>
        <member name="E:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.CurrentViewChanged">
            <summary>
            Raised when the current view is changed for a new view.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.ModelSingleEntityBase`1">
            <summary>
            Base class for models with a single entity as the root.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase">
            <summary>
            Base class for models.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IModel">
            <summary>
            Represents a model.  Models are logical wrappers around entities; they define a boundary around the object graph
            of the underlying entity.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IModel.HasEntity(System.Guid)">
            <summary>
            Returns true if the Model has an entity with given Id in its entity graph.
            </summary>
            <param name="id">Id of the entity sought.</param>
            <returns>True if the Model has the entity in its entity graph.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IModel.ContainsEntitiesThatNeedToBeSaved">
            <summary>
            Returns true if the model contains an entity that needs to be saved.  The model will not dig the graph
            more than required by the boundary that it represents (e.g. a "Client" model will not check for client's addresses, 
            while a "ClientAddress" model would.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IModel.GetEntity(System.Guid)">
            <summary>
            Returns a child entity that has the given Id.
            </summary>
            <param name="id">The id of the entity sought.</param>
            <returns>The entity, or null if no entity is found.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IModel.Name">
            <summary>
            Gets the name of the model.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.#ctor">
            <summary>
            Ctor; sets the name to this type's name
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.HasEntity(System.Guid)">
            <summary>
            Returns true if the Model has an entity with given Id in its entity graph.
            </summary>
            <param name="id">Id of the entity sought.</param>
            <returns>True if the Model has the entity in its entity graph.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.ContainsEntitiesThatNeedToBeSaved">
            <summary>
            Returns true if the model contains an entity that needs to be saved.  The model will not dig the graph
            more than required by the boundary that it represents (e.g. a "Client" model will not check for client's addresses, 
            while a "ClientAddress" model would.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.GetEntity(System.Guid)">
            <summary>
            Returns a child entity that has the given Id.
            </summary>
            <param name="id">The id of the entity sought.</param>
            <returns>The entity, or null if no entity is found.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.Name">
            <summary>
            Gets the name of the model.  Overridable.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelSingleEntityBase`1.#ctor(`0)">
            <summary>
            Ctor.
            </summary>
            <param name="entity">The root entity.</param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ModelSingleEntityBase`1.Entity">
            <summary>
            Gets the root entity.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Load(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Loads a module.  Loading a module through this interface is necessary to make the module part of the application's 
            lifetime management.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be loaded in Ninject.
            </summary>
            <param name="module">The application module to load.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.IsLoaded(System.String)">
            <summary>
            Returns true if a module with that name is loaded.
            </summary>
            <param name="name">the name of the module to look fo.</param>
            <returns>true if the module is loaded; otherwise, false.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Activate(System.String)">
            <summary>
            Activates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to activate a module that is not loaded yet.
            </summary>
            <param name="name">Name of the module to activate.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when activating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Activate(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Activates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to activate a module that is not loaded yet.
            </summary>
            <param name="module">A module that must be loaded.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when activating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ActivateAll">
            <summary>
            Activates all currently loaded modules.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Deactivate(System.String)">
            <summary>
            Deactivates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to deactivated a module that not loaded and not activated.
            </summary>
            <param name="name">Name of the module to deactivate.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when deactivating a module that's not loaded and not activated.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Deactivate(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Deactivates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to deactivated a module that not loaded and not activated.
            </summary>
            <param name="module">A module to deactivate</param>
            <exception cref="T:System.InvalidOperationException">Thrown when deactivating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.DeactivateAll">
            <summary>
            Deactivates all activated modules in reverse order that they have been loaded.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Unload(System.String)">
            <summary>
            Unloads a module.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be unloaded from Ninject.  It is invalid to unload a module that's not been loaded.
            </summary>
            <param name="name">Name of a module to unload.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the module has not been loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Unload(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Unloads a module.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be unloaded from Ninject.  It is invalid to unload a module that's not been loaded.
            </summary>
            <param name="module">A module to unload.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the module has not been loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.UnloadAll">
            <summary>
            Unloads all loaded modules.  Automatically deactivates all modules before unloading them.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.PresentationController">
            <summary>
            Gets or sets the presentation controller used to activate modules.  Using the controller, modules and place themselves
            in the UI loop.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.ModuleManager">
            <summary>
            Gets or sets Ninject's module manager.  If provided, then loading and unloading Ninject modules will affect Ninject as well.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.All">
            <summary>
            Returns a list of all loaded modules.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModuleManager.Count">
            <summary>
            Gets the total number of loaded modules.  Decreases when unloading modules.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Load(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Loads a module.  Loading a module through this interface is necessary to make the module part of the application's 
            lifetime management.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be loaded in Ninject.
            </summary>
            <param name="module">The application module to load.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.IsLoaded(System.String)">
            <summary>
            Returns true if a module with that name is loaded.
            </summary>
            <param name="name">the name of the module to look fo.</param>
            <returns>true if the module is loaded; otherwise, false.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Activate(System.String)">
            <summary>
            Activates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to activate a module that is not loaded yet.
            </summary>
            <param name="name">Name of the module to activate.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when activating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Activate(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Activates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to activate a module that is not loaded yet.
            </summary>
            <param name="module">A module that must be loaded.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when activating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ActivateAll">
            <summary>
            Activates all currently loaded modules.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Deactivate(System.String)">
            <summary>
            Deactivates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to deactivated a module that not loaded and not activated.
            </summary>
            <param name="name">Name of the module to deactivate.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when deactivating a module that's not loaded and not activated.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Deactivate(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Deactivates a module.  Generally this means, for a module, to interact with an <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.
            It is invalid to deactivated a module that not loaded and not activated.
            </summary>
            <param name="module">A module to deactivate</param>
            <exception cref="T:System.InvalidOperationException">Thrown when deactivating a module that's not loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.DeactivateAll">
            <summary>
            Deactivates all activated modules in reverse order that they have been loaded.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Unload(System.String)">
            <summary>
            Unloads a module.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be unloaded from Ninject.  It is invalid to unload a module that's not been loaded.
            </summary>
            <param name="name">Name of a module to unload.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the module has not been loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Unload(Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule)">
            <summary>
            Unloads a module.  If <see cref="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ModuleManager"/> is provided and the module implements <see cref="T:Ninject.Core.IModule"/>, 
            then the module will also be unloaded from Ninject.  It is invalid to unload a module that's not been loaded.
            </summary>
            <param name="module">A module to unload.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the module has not been loaded.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.UnloadAll">
            <summary>
            Unloads all loaded modules.  Automatically deactivates all modules before unloading them.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.PresentationController">
            <summary>
            Gets or sets the presentation controller used to activate modules.  Using the controller, modules and place themselves
            in the UI loop.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.ModuleManager">
            <summary>
            Gets or sets Ninject's module manager.  If provided, then loading and unloading Ninject modules will affect Ninject as well.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.All">
            <summary>
            Returns a list of all loaded modules.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Modularity.ApplicationModuleManager.Count">
            <summary>
            Gets the total number of loaded modules.  Decreases when unloading modules.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentableObject">
            <summary>
            Represents an object that has a Text property to be displayed on the UI.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IPresentableObject.Text">
            <summary>
            Gets or sets the text displayed on the screen for that object.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration">
            <summary>
            Placeholder for application configuration.  Will persist and unpersist against the schema defined in the file
            ApplicationConfiguration.xsd.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration.#ctor">
            <summary>
            Ctor.  Creates empty childs for optional childs.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration.ServicesConfiguration">
            <summary>
            Services section.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration.ModulesConfiguration">
            <summary>
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IView">
            <summary>
            Represents a view.
            
            Views are responsible for displaying <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IModel"/> objects to the UI.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IView.UpdateView">
            <summary>
            Called when the Model is modified from the outside of the View (probably in another view).
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IView.Model">
            <summary>
            Gets or sets the Model.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IView.Title">
            <summary>
            Gets or sets the view's title.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfigurationSectionHandler">
            <summary>
            Section handler for "foundation.application" configuration section.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Standard implementation (see <see cref="T:System.Configuration.IConfigurationSectionHandler"/>).
            </summary>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer"/>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns>A deserialized configuration.</returns>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ModuleDefinition">
            <summary>
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ModuleDefinition.Type">
            <summary>
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IViewControllerExtenderContract">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewControllerExtenderContract.GetView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IShell">
            <summary>
            The shell is the main window in an application.  It defines placeholders for displaying <c>IModel</c> objects,
            which wrap <c>IEntity</c> objects, and other placeholder for displaying non-data information (like commands) through the
            use of <c>IPresenter</c> objects.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IShell.Show">
            <summary>
            Tells the shell to display itself, when the application starts.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IShell.CreateViewControllers">
            <summary>
            Asks the shell to create one <c>IViewController</c> object for each region where <c>IModel</c> objects
            will be displayed, and return all created controllers.  The shell does not have to keep a reference to
            those controllers.
            </summary>
            <remarks>
            In most applications, the shell will have only one view controllers.
            </remarks>
            <returns>The list of created view controllers.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IShell.CreatePresenters">
            <summary>
            Asks the shell to create all non-data presenters (e.g. Status Bar Presenter, or Message Console Presenter).
            The shell does not have to keep a reference to those presenters.
            </summary>
            <returns>The list of created presenters.</returns>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition">
            <summary>
            Placeholder for a service definition.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition.Service">
            <summary>
            The assembly-qualified name of the type that implements IService for that service.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition.Contract">
            <summary>
            The assembly-qualified name of that service's contract.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition.Config">
            <summary>
            Optional.  Any configuration needed by a service that implements <see cref="T:Omniscient.Foundation.ApplicationModel.IConfigurable"/>.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ModulesConfiguration">
            <summary>
            Placeholder for modules configuration.  Contains a list of service definitions.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ModulesConfiguration.#ctor">
            <summary>
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ModulesConfiguration.Modules">
            <summary>
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter">
            <summary>
            The IPresenter gives direct access to the UI.  Contrary to <c>IViewController</c>s, which are the entry door to the MVC,
            IPresenter are there simply to display message windows, ask for user input, etc.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter.WriteMessage(System.Object)">
            <summary>
            Writes a single message to the presentation medium.  Most presenters will add more complex functionality (through
            a custom interface) than this simple function.
            </summary>
            <param name="message">A message to display.</param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter.Name">
            <summary>
            Gets the name of that presenter.  Generally the name of the concrete class.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IPresenter.RequiresUserInput">
            <summary>
            Gets a values indicating whether this presenter will require user input.  For example, if the presenter
            is to display message windows with an Ok button, then it requires user input.  If it simply writes messages
            to a console window, or to a status bar, for example, then it does not require user input.  According to the 
            value of <c>IPresentationController.SupportsUserInput</c>, the presenter may not be allowed to be registered.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Modularity.IApplicationModule">
            <summary>
             An application module is 
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController">
            <summary>
            Represents an application controller.  Responsible for managing entity edition concurrency, and for managing the UI in general.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view.  The controller is responsible for finding a view for that model, instanciating the view
            and displaying it correctly.
            </summary>
            <param name="model">The model to open.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.ViewClosed(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Informs the controller that a view has been closed.
            </summary>
            <param name="view">The view that's been closed.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.BeginEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Begins editing an entity.  The entity will be cloned to preserve original values, in case that <see cref="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.CancelEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)"/> would be called.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that wants to edit the entity.</param>
            <param name="entity">The entity to edit</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity is already being edited elsewhere.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.EndEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Ends editing an entity - that is, accept changes.  The clone will be destroyed, and the entity will be permanently changed,
            but not saved yet.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that was editing the entity.</param>
            <param name="entity">The entity that was edited.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.CancelEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Cancels editing the entity.  The entity will be recopied against the clone, and the status set back to <see cref="F:Omniscient.Foundation.Data.EntityStatus.Clean"/>.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that was editing the entity.</param>
            <param name="entity">The entity that was edited.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.RegisterPresenter(Omniscient.Foundation.ApplicationModel.Presentation.IPresenter)">
            <summary>
            Registers an <c>IPresenter</c>.
            </summary>
            <param name="presenter">An <c>IPresenter</c> to register.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the <c>IPresenter.RequiresUserInput</c> is
            <c>True</c>, while the value of <c>SupportsUserInput</c> is <c>False</c>.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.GetPresenter(System.String)">
            <summary>
            Gets an <c>IPresenter</c> using its name.
            </summary>
            <param name="name">The name of the presenter to look for.</param>
            <returns>An <c>IPresenter</c> if found.  Otherwise, null.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.GetPresenter``1">
            <summary>
            Gets an <c>IPresenter</c> using its type.
            </summary>
            <typeparam name="PresenterType">The type of the presenter to look for.</typeparam>
            <returns>An <c>IPresenter</c> if found.  Otherwise, null.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.ViewControllers">
            <summary>
            Gets the list of view controllers.  Default use is to feed that list at application startup.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.SupportsUserInput">
            <summary>
            Gets a value indicating wheter this presentation controller supports user input.
            If <c>False</c>, then calling <c>RegisterPresenter</c> with an <c>IPresenter</c>
            that requires user input will fail.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController">
            <summary>
            Default implementation for <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.  Generally, does not have to be derived for default behavior.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.#ctor(System.Boolean)">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view.  The controller is responsible for finding a view for that model, instanciating the view
            and displaying it correctly.
            </summary>
            <param name="model">The model to open.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.ViewClosed(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Informs the controller that a view has been closed.
            </summary>
            <param name="view">The view that's been closed.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.BeginEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Begins editing an entity.  The entity will be cloned to preserve original values, in case that <see cref="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.CancelEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)"/> would be called.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that wants to edit the entity.</param>
            <param name="entity">The entity to edit</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity is already being edited elsewhere.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.CancelEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Cancels editing the entity.  The entity will be recopied against the clone, and the status set back to <see cref="F:Omniscient.Foundation.Data.EntityStatus.Clean"/>.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that was editing the entity.</param>
            <param name="entity">The entity that was edited.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.EndEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Ends editing an entity - that is, accept changes.  The clone will be destroyed, and the entity will be permanently changed,
            but not saved yet.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that was editing the entity.</param>
            <param name="entity">The entity that was edited.</param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.ViewControllers">
            <summary>
            Gets the list of view controllers.  Default use is to feed that list at application startup.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.ModelMultiEntitiesBase`1">
            <summary>
            Base class for models with multiple entities as the root.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelMultiEntitiesBase`1.#ctor(System.Collections.Generic.List{`0})">
            <summary>
            Ctor.
            </summary>
            <param name="entities">The list of root entities.</param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ModelMultiEntitiesBase`1.Entities">
            <summary>
            Gets the list of root entities.
            </summary>
        </member>
    </members>
</doc>
