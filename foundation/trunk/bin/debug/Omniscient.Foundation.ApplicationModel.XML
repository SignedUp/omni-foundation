<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Omniscient.Foundation.ApplicationModel</name>
    </assembly>
    <members>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IViewController">
            <summary>
            Defines a view controller.
            
            View controllers are responsible for controlling the display of individual views.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view for the given model.
            </summary>
            <param name="model">Model to open in a view.</param>
            <returns>Newly opened view.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.CurrentView">
            <summary>
            Returns the view that has the focus, or by any other mean is the "current view".
            </summary>
        </member>
        <member name="E:Omniscient.Foundation.ApplicationModel.Presentation.IViewController.CurrentViewChanged">
            <summary>
            Raised when the current view is changed for a new view.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.ApplicationManager">
            <summary>
            Abstracts the concept of an application.  Serves as the bootstrapper of any application
            that uses the Foundation.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication">
            <summary>
            Starts the application.  That method should be one of the first being called when the program starts.  The method
            loads the configuration from the AppDomain configuration file.
            </summary>
            <remarks>
            That method will look for application configuration.  In the configuration file, the config section must
            be called "foundation.application", and must be in the namespace 
            "http://schemas.omniscient.ca/foundation/applicationConfiguration.xsd".  See the xsd schema file ApplicationConfiguration.xsd
            for the complete schema.
            </remarks>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication(Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration)">
            <summary>
            Starts the application.  That method should be one of the first being called when the program starts. The method
            accepts an existing configuration object.  See <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/> for default configuration.
            </summary>
            <param name="config">Loaded application object.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.CloseApplication">
            <summary>
            Closes the application.  Generally, that should lead to the process being terminated.
            </summary>
            <remarks>
            All services that implement <see cref="T:Omniscient.Foundation.ServiceModel.IStartable"/> are stopped here, in reverse order that they 
            have been started.
            </remarks>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Current">
            <summary>
            Gets the current Application object.  Each application using foundation has a single Current Application.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.IsStarted">
            <summary>
            Gets a value indicating whether <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Current"/> has been started by a call to <see cref="M:Omniscient.Foundation.ApplicationModel.ApplicationManager.StartApplication"/>.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ServiceContainer">
            <summary>
            Gets or sets the service container to be used.  Generally an instance of <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ServiceContainer"/>.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.PresentationController">
            <summary>
            Gets or sets the Presentation Controller to be used.  Generally an instance of <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.PresentationController"/>.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ObjectContainer">
            <summary>
            Gets or sets an <see cref="T:Omniscient.Foundation.IObjectContainer"/> instance.  Defaults to <see cref="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.ObjectContainer"/>.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.ApplicationManager.Config">
            <summary>
            Gets the deserialized configuration.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition">
            <summary>
            Placeholder for a service definition.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition.Service">
            <summary>
            The assembly-qualified name of the type that implements IService for that service.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition.Contract">
            <summary>
            The assembly-qualified name of that service's contract.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServiceDefinition.Config">
            <summary>
            Optional.  Any configuration needed by a service that implements <see cref="T:Omniscient.Foundation.ServiceModel.IConfigurable"/>.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ModulesConfiguration">
            <summary>
            Placeholder for modules configuration.  Contains a list of service definitions.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfigurationSectionHandler">
            <summary>
            Section handler for "foundation.application" configuration section.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
            Standard implementation (see <see cref="T:System.Configuration.IConfigurationSectionHandler"/>).
            </summary>
            <seealso cref="T:System.Xml.Serialization.XmlSerializer"/>
            <param name="parent"></param>
            <param name="configContext"></param>
            <param name="section"></param>
            <returns>A deserialized configuration.</returns>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IView">
            <summary>
            Represents a view.
            
            Views are responsible for displaying <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IModel"/> objects to the UI.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IView.UpdateView">
            <summary>
            Called when the Model is modified from the outside of the View (probably in another view).
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IView.Model">
            <summary>
            Gets or sets the Model.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController">
            <summary>
            Represents an application controller.  Responsible for managing entity state and clones for edit.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view.  The controller is responsible for finding a view for that model, instanciating the view
            and displaying it correctly.
            </summary>
            <param name="model">The model to open.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.ViewClosed(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Informs the controller that a view has been closed.
            </summary>
            <param name="view">The view that's been closed.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.BeginEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Begins editing an entity.  The entity will be cloned to preserve original values, in case that <see cref="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.CancelEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)"/> would be called.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that wants to edit the entity.</param>
            <param name="entity">The entity to edit</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity is already being edited elsewhere.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.EndEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Ends editing an entity - that is, accept changes.  The clone will be destroyed, and the entity will be permanently changed,
            but not saved yet.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that was editing the entity.</param>
            <param name="entity">The entity that was edited.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.CancelEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Cancels editing the entity.  The entity will be recopied against the clone, and the status set back to <see cref="F:Omniscient.Foundation.Data.EntityStatus.Clean"/>.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that was editing the entity.</param>
            <param name="entity">The entity that was edited.</param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController.ViewControllers">
            <summary>
            Gets the list of view controllers.  Default use is to feed that list at application startup.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.ModelMultiEntitiesBase`1">
            <summary>
            Base class for models with multiple entities as the root.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase">
            <summary>
            Base class for models.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.IModel">
            <summary>
            Represents a model.  Models are logical wrappers around entities; they define a boundary around the object graph
            of the underlying entity.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IModel.HasEntity(System.Guid)">
            <summary>
            Returns true if the Model has an entity with given Id in its entity graph.
            </summary>
            <param name="id">Id of the entity sought.</param>
            <returns>True if the Model has the entity in its entity graph.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IModel.ContainsEntitiesThatNeedToBeSaved">
            <summary>
            Returns true if the model contains an entity that needs to be saved.  The model will not dig the graph
            more than required by the boundary that it represents (e.g. a "Client" model will not check for client's addresses, 
            while a "ClientAddress" model would.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.IModel.GetEntity(System.Guid)">
            <summary>
            Returns a child entity that has the given Id.
            </summary>
            <param name="id">The id of the entity sought.</param>
            <returns>The entity, or null if no entity is found.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.IModel.Name">
            <summary>
            Gets the name of the model.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.#ctor">
            <summary>
            Ctor; sets the name to this type's name
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.HasEntity(System.Guid)">
            <summary>
            Returns true if the Model has an entity with given Id in its entity graph.
            </summary>
            <param name="id">Id of the entity sought.</param>
            <returns>True if the Model has the entity in its entity graph.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.ContainsEntitiesThatNeedToBeSaved">
            <summary>
            Returns true if the model contains an entity that needs to be saved.  The model will not dig the graph
            more than required by the boundary that it represents (e.g. a "Client" model will not check for client's addresses, 
            while a "ClientAddress" model would.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.GetEntity(System.Guid)">
            <summary>
            Returns a child entity that has the given Id.
            </summary>
            <param name="id">The id of the entity sought.</param>
            <returns>The entity, or null if no entity is found.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ModelBase.Name">
            <summary>
            Gets the name of the model.  Overridable.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelMultiEntitiesBase`1.#ctor(Omniscient.Foundation.Data.EntityList{`0})">
            <summary>
            Ctor.
            </summary>
            <param name="entities">The list of root entities.</param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ModelMultiEntitiesBase`1.Entities">
            <summary>
            Gets the list of root entities.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController">
            <summary>
            Default implementation for <see cref="T:Omniscient.Foundation.ApplicationModel.Presentation.IPresentationController"/>.  Generally, does not have to be derived for default behavior.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.#ctor">
            <summary>
            Ctor.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.OpenView(Omniscient.Foundation.ApplicationModel.Presentation.IModel)">
            <summary>
            Opens a view.  The controller is responsible for finding a view for that model, instanciating the view
            and displaying it correctly.
            </summary>
            <param name="model">The model to open.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.ViewClosed(Omniscient.Foundation.ApplicationModel.Presentation.IView)">
            <summary>
            Informs the controller that a view has been closed.
            </summary>
            <param name="view">The view that's been closed.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.BeginEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Begins editing an entity.  The entity will be cloned to preserve original values, in case that <see cref="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.CancelEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)"/> would be called.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that wants to edit the entity.</param>
            <param name="entity">The entity to edit</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the entity is already being edited elsewhere.</exception>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.CancelEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Cancels editing the entity.  The entity will be recopied against the clone, and the status set back to <see cref="F:Omniscient.Foundation.Data.EntityStatus.Clean"/>.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that was editing the entity.</param>
            <param name="entity">The entity that was edited.</param>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.EndEdit``1(Omniscient.Foundation.ApplicationModel.Presentation.IView,``0)">
            <summary>
            Ends editing an entity - that is, accept changes.  The clone will be destroyed, and the entity will be permanently changed,
            but not saved yet.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="view">The view that was editing the entity.</param>
            <param name="entity">The entity that was edited.</param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.PresentationController.ViewControllers">
            <summary>
            Gets the list of view controllers.  Default use is to feed that list at application startup.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration">
            <summary>
            Placeholder for application configuration.  Will persist and unpersist against the schema defined in the file
            ApplicationConfiguration.xsd.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration.#ctor">
            <summary>
            Ctor.  Creates empty childs for optional childs.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ApplicationConfiguration.ServicesConfiguration">
            <summary>
            Services section.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Configuration.ServicesConfiguration">
            <summary>
            Placeholder for services configuration.  Contains a list of service definitions.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Configuration.ServicesConfiguration.#ctor">
            <summary>
            Ctor.  Creates an empty list of service definitions.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Configuration.ServicesConfiguration.ServiceDefinitions">
            <summary>
            Gets the list of service definitions.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.Presentation.ModelSingleEntityBase`1">
            <summary>
            Base class for models with a single entity as the root.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.Presentation.ModelSingleEntityBase`1.#ctor(`0)">
            <summary>
            Ctor.
            </summary>
            <param name="entity">The root entity.</param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.Presentation.ModelSingleEntityBase`1.Entity">
            <summary>
            Gets the root entity.
            </summary>
        </member>
    </members>
</doc>
