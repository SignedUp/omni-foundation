<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Omniscient.Foundation</name>
    </assembly>
    <members>
        <member name="T:Omniscient.Foundation.Security.SecurePrincipal">
            <summary>
            Implementation of <c>IPrincipal</c> that allows the principal to be "promoted", that is, add roles to it.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecurePrincipal.#ctor">
            <summary>
            Creates an instance of SecurePrincipal with an anonymous (unauthenticated) <c>SecureIdentity</c>, and an empty collection
            of roles.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecurePrincipal.#ctor(Omniscient.Foundation.Security.SecureIdentity,System.String[])">
            <summary>
            Creates an instance of SecurePrincipal with an existing <c>SecureIdentity</c>, and an initial collection of roles.
            </summary>
            <param name="identity"></param>
            <param name="roles"></param>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecurePrincipal.Promote(System.String[])">
            <summary>
            Adds specified roles to the collection of roles.
            </summary>
            <param name="roles">Roles to add to the roles collection.</param>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecurePrincipal.IsInRole(System.String)">
            <summary>
            Returns true if that principal is granted with given role.  Otherwise, false.
            </summary>
            <param name="role">The role to test.</param>
            <returns>True if that principal is granted with role <paramref name="role"/>.  Otherwise, false.</returns>
        </member>
        <member name="P:Omniscient.Foundation.Security.SecurePrincipal.AllRoles">
            <summary>
            Gets a string array of all roles this principal is granted.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.Security.SecurePrincipal.System#Security#Principal#IPrincipal#Identity">
            <summary>
            Gets the <c>IIdentity</c> of that principal.  Concrete type is <c>SecureIdentity</c>.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.Security.SecurePrincipal.Identity">
            <summary>
            Gets the <c>SecureIdentity</c> of that principal.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.StringExtensions">
            <summary>
            Defines extension methods on the String class.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.Commanding.TransitiveCommand">
            <summary>
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.Commanding.ICommandCore">
            <summary>
            Interface that represents a command.  The event CanExecuteChanged has been simplified so that this 
            interface is identical to the one contained in WPF (PresentationCore.dll).  ICommandCore has been 
            created because we don't believe that commands should be limited to environments with a user interface.
            </summary>
            <remarks>
            Your command can easily implement both interfaces to be able to leverage WPF's functionalities.  Since
            the members signatures are identical, you don't need to replicate any code; each member's implementation
            will handle the member from both interfaces automatically.
            </remarks>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.ICommandCore.CanExecute(System.Object)">
            <summary>
            Retreives a value that indicates whether or not the command is in a state that allows execution.
            </summary>
            <param name="param">This is the param that would be passed to <see cref="M:Omniscient.Foundation.Commanding.ICommandCore.Execute(System.Object)"/> method.</param>
            <returns>True if the command is in a state that allows execution; otherwise, false.</returns>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.ICommandCore.Execute(System.Object)">
            <summary>
            Executes the command
            </summary>
            <param name="param">Any value needed for execution.</param>
        </member>
        <member name="E:Omniscient.Foundation.Commanding.ICommandCore.CanExecuteChanged">
            <summary>
            Raised when the command's availability changes.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.Commanding.ICommandCore.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.TransitiveCommand.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.TransitiveCommand.RegisterHandler(Omniscient.Foundation.Commanding.ICommandHandler)">
            <summary>
            </summary>
            <param name="handler"></param>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.TransitiveCommand.UnregisterHandler(Omniscient.Foundation.Commanding.ICommandHandler)">
            <summary>
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:Omniscient.Foundation.ServiceModel.GenericSingleCallService`2">
            <summary>
            Defines a generic "single call" service for contract type <typeparamref name="TContract"/> 
            and implementation type <typeparamref name="TImplementation"/>.
            
            This service's implementation will be instaciated each time the service is requested.
            </summary>
            <typeparam name="TContract">Service's contract type.</typeparam>
            <typeparam name="TImplementation">Implementation type.</typeparam>
        </member>
        <member name="T:Omniscient.Foundation.ServiceModel.ServiceBase`1">
            <summary>
            </summary>
            <typeparam name="TContract"></typeparam>
        </member>
        <member name="T:Omniscient.Foundation.ServiceModel.IService">
            <summary>
            Defines the base interface for a service.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.IService.GetImplementation">
            <summary>
            Gets the implementation of the service.  Returns an object whose type must be equal to <c>ImplementationType</c>.
            </summary>
            <returns>Service's implementation, of type <c>ImplementationType</c>.</returns>
        </member>
        <member name="P:Omniscient.Foundation.ServiceModel.IService.Name">
            <summary>
            Gets the name of the service.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ServiceModel.IService.ImplementationType">
            <summary>
            Gets the implementation's contract type of the service.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.ServiceBase`1.GetImplementation">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.GenericSingleCallService`2.GetImplementation">
            <summary>
            Returns the implementation; instanciate a new one on each call.
            </summary>
            <returns>Service's implementation.</returns>
        </member>
        <member name="T:Omniscient.Foundation.Security.SecureIdentity">
            <summary>
            Implementation of <c>IIdentity</c> that allows the identity to be "promoted", that is, go from anonymous (non-authenticated)
            to authenticated with a name, password and an authentication type.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecureIdentity.#ctor">
            <summary>
            Creates an anonymous (unauthenticated) user.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecureIdentity.#ctor(System.String,System.Security.SecureString)">
            <summary>
            Creates an authenticated user with given name and password.
            </summary>
            <param name="name">The name of the authenticated user.</param>
            <param name="password">The password used to authenticate the user.</param>
            <remarks>The password is allowed to be null.</remarks>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecureIdentity.#ctor(System.String,System.Security.SecureString,System.String)">
            <summary>
            Creates an authenticated user with given name, password and authentication machanism.
            </summary>
            <param name="name">The name of the authenticated user.</param>
            <param name="password">The password used to authenticate the user.</param>
            <param name="authenticationType">The authentication mechanism used to authenticate the user.</param>
            <remarks>The password is allowed to be null.</remarks>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecureIdentity.Promote(System.String,System.Security.SecureString)">
            <summary>
            Promotes the identity with a username and password.  The identity is then considered authenticated.
            </summary>
            <remarks>The password is allowed to be null.</remarks>
            <param name="name">The username used to authenticate.</param>
            <param name="password">The password used to authenticate.</param>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecureIdentity.Promote(System.String,System.Security.SecureString,System.String)">
            <summary>
            Promotes the identity with a username.  The identity is then considered authenticated.
            </summary>
            <param name="name">The username used to authenticate.</param>
            <param name="password">The password used to authenticate.</param>
            <param name="authenticationType">The authentication type used to authenticate.</param>
        </member>
        <member name="P:Omniscient.Foundation.Security.SecureIdentity.Password">
            <summary>
            Gets the password used to promote (authenticate) this Identity, or null if no password was supplied or if the 
            identity is anonymous (unauthenticated).
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.Security.SecureIdentity.AuthenticationType">
            <summary>
            Gets the authentication mechanism used to authenticate the user.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.Security.SecureIdentity.IsAuthenticated">
            <summary>
            Gets a boolean that indicates whether the user has been authenticated.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.Security.SecureIdentity.Name">
            <summary>
            Gets the name of the user represented by this Identity.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.Security.CredentialService">
            <summary>
            Defines a base implementation class for ICredentialService.  When this service starts, it registers an anonymous user
            as the AppDomain's principal.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.IExtendable`1">
            <summary>
            Defines a component whose behavior can be extended by means of other components
            that "plug" into the first, coupled only against contract <typeparamref name="TContract"/>.
            </summary>
            <typeparam name="TContract">Contract type that extenders must implement when pluging into that extendable.</typeparam>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.IExtendable`1.Register(Omniscient.Foundation.ApplicationModel.IExtender{`0})">
            <summary>
            Plugs an extender into the extendable.  The extender must implement contract <typeparamref name="TContract"/>.
            </summary>
            <param name="extender"></param>
        </member>
        <member name="P:Omniscient.Foundation.ApplicationModel.IExtendable`1.Extenders">
            <summary>
            Gets the list of plugged-in extenders
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.Security.ICredentialService">
            <summary>
            Defines a service that will provide the application with user credentials.  The service places the current user
            in the <c>System.Threading.Thread.CurrentPrincipal</c> value.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.IStartable">
            <summary>
            Defines a "startable" service.  Those services are informed of the application startup and shutdown.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.IStartable.Start">
            <summary>
            Called when the application starts.  All services are loaded when this method is called.  Services are started
            in the order they are defined in the configuration.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.IStartable.Stop">
            <summary>
            Called when the application shuts down.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.ICredentialService.EnsureUserIsAuthenticated">
            <summary>
            Ensures that the current user is not anonymous.  The service will as extenders to ask for user name and password.
            If no extenders are plugged in, the service is unable to log the user, and the InvalidOperationException is thrown.
            </summary>
            <exception cref="T:System.InvalidOperationException">The service must rely on extenders to ask for username and password;
            therefore, if no extenders are plugged into the extension port, this exception is thrown.</exception>
        </member>
        <member name="P:Omniscient.Foundation.Security.ICredentialService.CurrentPrincipal">
            <summary>
            Called on request from anywhere where the user credentials are required.  Returns the same object as 
            <c>System.Threading.Thread.CurrentPrincipal</c>.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.CredentialService.GetImplementation">
            <summary>
            Retrieves implementation for ICredentialService.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.Security.CredentialService.EnsureUserIsAuthenticated">
            <summary>
            Ensures the user has entered login information.
            </summary>
            <remarks>
            If the user did not enter any information, UserCredential will be assigned the "anonymous" status.
            </remarks>
        </member>
        <member name="M:Omniscient.Foundation.Security.CredentialService.Start">
            <summary>
            Starts the current service.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.CredentialService.Stop">
            <summary>
            Stops the current service.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.Security.CredentialService.CurrentPrincipal">
            <summary>
            Returns the current user principal.  That user will not be logged in until a call is made to <c>EnsureUserIsLoggedIn</c>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.IConfigurable">
            <summary>
            Defines a configurable service.  Implement this interface when you need your service to receive configuration.
            </summary>
            <remarks>
            See the configuration schema for more details.
            </remarks>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.IConfigurable.Configure(System.Xml.XmlElement)">
            <summary>
            Called at configuration time.  If the service is defined in the configuration file, that method is automatically called.
            </summary>
            <param name="config">The xml configuration.</param>
            <remarks>
            See the ApplicationModel configuration schema for more details.
            </remarks>
        </member>
        <member name="T:Omniscient.Foundation.Logging.ILoggingService">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Logging.ILoggingService.GetLogger(System.String)">
            <summary>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.Logging.ILoggingService.GetLogger(System.Type)">
            <summary>
            </summary>
            <param name="logSource"></param>
            <returns></returns>
        </member>
        <member name="T:Omniscient.Foundation.Commanding.DelegateCommandHandler">
            <summary>
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.Commanding.ICommandHandler">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.ICommandHandler.Execute(System.Object)">
            <summary>
            </summary>
            <param name="param"></param>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.DelegateCommandHandler.#ctor(System.Action{System.Object})">
            <summary>
            </summary>
            <param name="executeMethod"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.DelegateCommandHandler.Execute(System.Object)">
            <summary>
            </summary>
            <param name="param"></param>
        </member>
        <member name="T:Omniscient.Foundation.Commanding.ICompositeCommand">
            <summary>
            Defines a composite command.  When executed, a composite command is executing all its children commands.  
            See <see cref="T:Omniscient.Foundation.Commanding.CompositeCommand"/> for default implementation.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.Commanding.CompositeCommand">
            <summary>
            Base class for composite commands.  When executed, a composite command is executing all its children commands.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.CompositeCommand.#ctor">
            <summary>
            default constructor
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.CompositeCommand.CanExecute(System.Object)">
            <summary>
            Returns True if the command is in a state that allows execution.  Otherwise, False.
            </summary>
            <param name="param">The object that will be passed to <see cref="M:Omniscient.Foundation.Commanding.CompositeCommand.Execute(System.Object)"/>.</param>
            <returns>True if command allows execution.  Otherwise, False.</returns>
        </member>
        <member name="M:Omniscient.Foundation.Commanding.CompositeCommand.Execute(System.Object)">
            <summary>
            Executes all children commands sequentially.  Overrides may add behavior to the execution.
            </summary>
            <param name="param">Object passed to the command for the execution.</param>
        </member>
        <member name="P:Omniscient.Foundation.Commanding.CompositeCommand.Commands">
            <summary>
            Gets the list of children (composed) commands.  Upon execution, those children commands will be executed sequentially.
            </summary>
        </member>
        <member name="E:Omniscient.Foundation.Commanding.CompositeCommand.CanExecuteChanged">
            <summary>
            Raised when <see cref="E:Omniscient.Foundation.Commanding.CompositeCommand.CanExecuteChanged"/> will change its return value.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.Commanding.CompositeCommand.Name">
            <summary>
            Gets the name of the command.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.Security.SecureStringConverter">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecureStringConverter.FromSecureString(System.Security.SecureString)">
            <summary>
            </summary>
            <param name="secureString"></param>
            <returns></returns>
        </member>
        <member name="M:Omniscient.Foundation.Security.SecureStringConverter.ToSecureString(System.String)">
            <summary>
            </summary>
            <param name="regularString"></param>
            <returns></returns>
        </member>
        <member name="T:Omniscient.Foundation.Logging.ILogger">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Logging.ILogger.Debug(System.Object)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Omniscient.Foundation.Logging.ILogger.Info(System.Object)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Omniscient.Foundation.Logging.ILogger.Error(System.Object)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Omniscient.Foundation.Logging.ILogger.Fatal(System.Object)">
            <summary>
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:Omniscient.Foundation.ServiceModel.ServiceProvider">
            <summary>
            Default implementation of an <see cref="T:Omniscient.Foundation.ServiceModel.IServiceProvider"/>.  Reads services from the configuration file.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.ServiceModel.IServiceProvider">
            <summary>
            Defines a service provider.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.IServiceProvider.GetService``1">
            <summary>
            Gets a service that implements the contract <typeparamref name="TContract"/>.
            </summary>
            <typeparam name="TContract">The type of the contract implemented by the service.</typeparam>
            <returns>The implementation of the contract, or null if no service is found for this contract.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.IServiceProvider.RegisterService``1(Omniscient.Foundation.ServiceModel.IService)">
            <summary>
            Adds a service to the provider.
            </summary>
            <typeparam name="TContract">The type of contract that service implements.</typeparam>
            <param name="service">A service implementation.</param>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.IServiceProvider.RegisterService(System.Type,Omniscient.Foundation.ServiceModel.IService)">
            <summary>
            Adds a service to the provider.
            </summary>
            <param name="contract">Service's contract type.</param>
            <param name="service">Service implementation (must support contract's type)</param>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.IServiceProvider.Clear">
            <summary>
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ServiceModel.IServiceProvider.AllServices">
            <summary>
            Gets all services, in the order they have been registered.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ServiceModel.IServiceProvider.ServiceCount">
            <summary>
            Gets the number of services that are registered.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.ServiceProvider.#ctor">
            <summary>
            Ctor
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.ServiceProvider.GetService``1">
            <summary>
            Returns the contract implementation of a service, if any, that implements the contract <typeparamref name="TContract"/>.
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
            <returns>The contract's implementation, or null if no service found for that contract.</returns>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.ServiceProvider.RegisterService``1(Omniscient.Foundation.ServiceModel.IService)">
            <summary>
            Registers a service at run-time.
            </summary>
            <typeparam name="TContract">The contract type.</typeparam>
            <param name="service">An instance of a service class.</param>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.ServiceProvider.RegisterService(System.Type,Omniscient.Foundation.ServiceModel.IService)">
            <summary>
            Adds a service to the provider.
            </summary>
            <param name="contractType">Service's contract type.</param>
            <param name="service">Service implementation (must support contract's type)</param>
        </member>
        <member name="P:Omniscient.Foundation.ServiceModel.ServiceProvider.AllServices">
            <summary>
            Gets all services, in the order they have been registered.
            </summary>
        </member>
        <member name="P:Omniscient.Foundation.ServiceModel.ServiceProvider.ServiceCount">
            <summary>
            Gets the number of services that are registered.
            </summary>
        </member>
        <member name="T:Ninject.Core.Binding.Syntax.IBindingTargetSyntaxExtension">
            <summary>
             Extends functionality of <typeparamref name="IBindingTargetSyntax"/>
            </summary>
        </member>
        <member name="M:Ninject.Core.Binding.Syntax.IBindingTargetSyntaxExtension.To``1(Ninject.Core.Binding.Syntax.IBindingTargetSyntax,Ninject.Core.IKernel,``0)">
            <summary>
             Extends functionality of <typeparamref name="IBindingTargetSyntax"/>
             by allowing binding instances of types directly.
            </summary>
            <param name="syntax"></param>
            <param name="kernel"></param>
            <param name="instance">Instance of type.</param>
            <typeparam name="T">Type of object.</typeparam>
            <returns></returns>
        </member>
        <member name="T:Omniscient.Foundation.ServiceModel.GenericSingletonService`2">
            <summary>
            </summary>
            <typeparam name="TContract"></typeparam>
            <typeparam name="TImplementation"></typeparam>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.GenericSingletonService`2.#ctor">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.GenericSingletonService`2.GetImplementation">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Omniscient.Foundation.ApplicationModel.IExtender`1">
            <summary>
            </summary>
            <typeparam name="TContract"></typeparam>
        </member>
        <member name="M:Omniscient.Foundation.ApplicationModel.IExtender`1.GetImplementation">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="T:Omniscient.Foundation.ServiceModel.DIServiceProvider">
            <summary>
            Service provider that registers services against Ninject's dependency injection container.  Once registered, the service
            is available from the Kernel, as well as from the service provider itself.  In all cases, a call to 
            <see cref="M:Omniscient.Foundation.ServiceModel.IService.GetImplementation"/> will be made each time the service is accessed.
            </summary>
            <example>
            Let's have a validation service: IValidator and IValidatorService (derives from IService).  Let's also have a class named Validator that implements
            IValidator and IValidatorService, and returns a reference to itself when GetImplementation is invoked.
            You register that service with a call to DIServiceProvider.RegisterService&lt;IValidator&gt;(new Validator());
            
            Once it's registered, you can access the service like this:
            IValidator v = serviceProvider.GetService&lt;IValidator&gt;();
            
            or like that:
            IValidator v = kernel.Get&lt;IValidator&gt;();
            
            In all cases, the framework will call GetImplementation on the service to return an instance of IValidator.
            </example>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.DIServiceProvider.#ctor(Ninject.Core.IKernel)">
            <summary>
            Ctor
            </summary>
            <param name="kernel">a Ninject kernel</param>
        </member>
        <member name="M:Omniscient.Foundation.ServiceModel.DIServiceProvider.RegisterService(System.Type,Omniscient.Foundation.ServiceModel.IService)">
            <summary>
            Adds a service to the provider, and adds a binding to the Kernel, allowing the service to be part of the dependency
            injection machanism.
            </summary>
            <param name="contractType">Service's contract type.</param>
            <param name="service">Service implementation (must support contract's type)</param>
        </member>
        <member name="P:Omniscient.Foundation.ServiceModel.DIServiceProvider.Kernel">
            <summary>
            Gets or sets the Ninject kernel used to register regular services as Ninject's services, so that they're part of
            the DI mechanism.
            </summary>
        </member>
        <member name="T:Omniscient.Foundation.Security.IRoleProvider">
            <summary>
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.IRoleProvider.GetRolesForUser(System.String)">
            <summary>
            </summary>
            <param name="username"></param>
            <returns></returns>
        </member>
        <member name="T:Omniscient.Foundation.Security.ICredentialServiceExtender">
            <summary>
            Defines an Extender contract for prompting a user for his/her credential.
            </summary>
        </member>
        <member name="M:Omniscient.Foundation.Security.ICredentialServiceExtender.NegociateAuthentication(Omniscient.Foundation.Security.SecurePrincipal)">
            <summary>
            Prompts a user for his/her credential and returns it.
            </summary>
            <returns>User credentials.</returns>
        </member>
    </members>
</doc>
